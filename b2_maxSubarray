class Solution:
    def maxSubArray_kadanes(self, nums): # SOLUTION: Kadane's Algo is EFFICIENT - O(n)
        n = len(nums)
        localMax  = 0 
        globalMax = -1000000
        i = 0

        while (i < n):
            localMax = max(nums[i], nums[i] + localMax)
            if localMax > globalMax:
                globalMax = localMax
            i += 1
        return globalMax


    def maxSubArray_bruteForce(self, nums): # SOLUTION WORKS BUT NOT EFFICIENT - O(n^2)
        if len(nums) == 1:
            return nums[0]
        
        i, window = 0, 1
        maxSub = sum(nums)
        
        while (window <= len(nums)):
            if (window+i > len(nums)):
                print("window, i, len(nums): ", window, i, len(nums))
                window += 1
                i = 0

            chunkSum = sum(nums[i:window+i])
            print("currWindow: ", nums[i:window+i])

            if (chunkSum > maxSub):
                maxSub = chunkSum
                print("maxSub: ", maxSub)
            
            i += 1
        return maxSub


s = Solution() 
print("answer: ", s.maxSubArray_kadanes([5,4,-1,7,8]), "expected: ", 23)
print("---------------------------------\n\n")

print("answer: ", s.maxSubArray_kadanes([1]), "expected: ", 1)
print("---------------------------------\n\n")

print("answer: ", s.maxSubArray_kadanes([-2,1,-3,4,-1,2,1,-5,4]), "expected: ", 6)
print("---------------------------------\n\n")

print("answer: ", s.maxSubArray_kadanes([8,-19,5,-4,20]), "expected: ", 21)
print("---------------------------------\n\n")

